name: Multi-Environment Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Stage 1: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      staging-url: ${{ steps.deploy-staging.outputs.url }}
      deployment-id: ${{ steps.deploy-staging.outputs.deployment-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: |
          echo "Installing Railway CLI..."
          npm install -g @railway/cli
          echo "Railway CLI installed successfully"
          railway --version || echo "Railway CLI version check failed"
          echo "Checking Railway token..."
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "❌ RAILWAY_TOKEN is not set"
            exit 1
          else
            echo "✅ RAILWAY_TOKEN is set"
          fi
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Frontend to Staging
        id: deploy-staging
        run: |
          cd shader-playground
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la | head -10
          echo "Checking for Dockerfile..."
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile found"
          else
            echo "❌ Dockerfile not found"
            exit 1
          fi
          echo "Connecting to Railway service..."
          railway service frontend-staging
          echo "Railway service connected, deploying..."
          railway up --detach
          echo "url=https://frontend-staging-production-3876.up.railway.app" >> $GITHUB_OUTPUT
          echo "deployment-id=frontend-$(date +%s)" >> $GITHUB_OUTPUT
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Backend to Staging
        run: |
          cd backend
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la | head -10
          echo "Checking for Dockerfile..."
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile found"
          else
            echo "❌ Dockerfile not found"
            exit 1
          fi
          echo "Connecting to Railway backend service..."
          railway service backend-staging
          echo "Railway backend service connected, deploying..."
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60

      - name: Run Staging Health Check
        run: |
          echo "Testing staging health checks..."
          echo "Frontend health check:"
          curl -f ${{ steps.deploy-staging.outputs.url }}/health || echo "⚠️ Frontend health check failed"
          echo "Backend health check:"
          curl -f https://backend-staging-production-bb3d.up.railway.app/health || echo "⚠️ Backend health check failed"
          echo "Health checks completed"

  # Stage 2: Create Production Approval Issue (only if staging succeeds)
  create-approval-issue:
    name: Create Production Approval Issue
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && needs.deploy-staging.result == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Create Production Approval Issue
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🚀 Creating production approval issue...')
            
            try {
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚀 Production Deployment Approval Required - ${context.sha.substring(0, 7)}`,
                body: `## Production Deployment Request

**Commit**: \`${context.sha}\`
**Branch**: \`${context.ref}\`
**Staging URL**: ${{ needs.deploy-staging.outputs.staging-url }}
**Deployment ID**: ${{ needs.deploy-staging.outputs.deployment-id }}

### 🧪 Staging Environment
Please test the staging environment before approving production deployment:
- **Frontend**: ${{ needs.deploy-staging.outputs.staging-url }}
- **Backend**: https://backend-staging-production-bb3d.up.railway.app

### ✅ Review Checklist
- [ ] Staging environment tested and working
- [ ] No breaking changes detected
- [ ] Performance is acceptable
- [ ] All critical features working
- [ ] Ready for production deployment

### 🚀 Approval Instructions
**To approve**: Comment \`approved\` on this issue
**To reject**: Comment \`rejected\` on this issue

### 📝 Recent Changes
${context.payload.head_commit ? context.payload.head_commit.message : 'Manual deployment'}

@lukashondrich

---
*This issue was created automatically after successful staging deployment. Please review and approve for production deployment.*`,
                assignees: ['lukashondrich'],
                labels: ['deployment', 'production-approval']
              })
              
              console.log('✅ Production approval issue created successfully!')
              console.log('Issue number:', issue.number)
              console.log('Issue URL:', issue.html_url)
              
            } catch (error) {
              console.error('❌ Failed to create approval issue:', error)
              throw error
            }

  # Stage 3: Deploy to Production (triggered by issue comment)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.user.login == 'github-actions[bot]' && contains(github.event.issue.title, 'Production Deployment Approval Required') && contains(github.event.comment.body, 'approved') && github.event.comment.user.login == 'lukashondrich'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Frontend to Production
        run: |
          cd shader-playground
          echo "Deploying to production frontend..."
          railway service tinge_frontend
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Backend to Production
        run: |
          cd backend
          echo "Deploying to production backend..."
          railway service tinge_backend
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for Production Deployment
        run: |
          echo "Waiting for production deployment to complete..."
          sleep 90

      - name: Run Production Health Check
        run: |
          echo "Testing production health checks..."
          curl -f https://tingefrontend-production.up.railway.app/health || echo "⚠️ Production frontend health check failed"
          curl -f https://tingebackend-production.up.railway.app/health || echo "⚠️ Production backend health check failed"

      - name: Close Approval Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            })
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ✅ Production Deployment Completed!

**Deployment Status**: Successful
**Production Frontend**: https://tingefrontend-production.up.railway.app
**Production Backend**: https://tingebackend-production.up.railway.app
**Deployed at**: ${new Date().toISOString()}

The production deployment has been completed and this issue is now closed.`
            })

      - name: Create Success Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `✅ Production Deployment Successful - ${context.sha.substring(0, 7)}`,
              body: `## 🎉 Production Deployment Successful!

**Commit**: \`${context.sha}\`
**Deployed at**: ${new Date().toISOString()}
**Production URLs**:
- Frontend: https://tingefrontend-production.up.railway.app
- Backend: https://tingebackend-production.up.railway.app

The deployment has been completed successfully and health checks passed.

This issue will be automatically closed.`,
              labels: ['deployment', 'production-success']
            }).then(({data: issue}) => {
              // Close the success issue immediately
              return github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              })
            })