<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="82" failures="28" errors="0" time="10.637">
    <testsuite name="src/tests/audio/audio-context.test.js" timestamp="2025-07-15T17:53:33.785Z" hostname="MACBOOKPRO.local" tests="28" failures="0" errors="0" skipped="0" time="0.077">
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext Creation &gt; should create AudioContext with standard constructor" time="0.007">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext Creation &gt; should create AudioContext with webkit fallback" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext Creation &gt; should handle missing AudioContext gracefully" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext State Management &gt; should handle suspended state" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext State Management &gt; should handle running state" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext State Management &gt; should handle closed state" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext State Management &gt; should resume suspended AudioContext" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext State Management &gt; should suspend running AudioContext" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; AudioContext State Management &gt; should close AudioContext" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; ensureAudioContext Function &gt; should resume suspended AudioContext" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; ensureAudioContext Function &gt; should not resume running AudioContext" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; ensureAudioContext Function &gt; should handle resume failures gracefully" time="0.005">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Operations &gt; should decode audio data successfully" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Operations &gt; should handle audio decoding failures" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Operations &gt; should create audio buffer manually" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Source Operations &gt; should create buffer source" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Source Operations &gt; should configure buffer source" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Source Operations &gt; should connect buffer source to destination" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Source Operations &gt; should start buffer source playback" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Source Operations &gt; should stop buffer source playback" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Buffer Source Operations &gt; should handle buffer source playback with timing" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Context Error Handling &gt; should handle AudioContext creation errors" time="0.005">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Context Error Handling &gt; should handle buffer source creation errors" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Context Error Handling &gt; should handle buffer source start errors" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Context Browser Compatibility &gt; should detect AudioContext support" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Audio Context Browser Compatibility &gt; should handle browsers without AudioContext" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Buffer Cache Management &gt; should implement buffer caching" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-context.test.js" name="AudioContext Management &gt; Buffer Cache Management &gt; should handle buffer cache eviction" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/tests/audio/audio-manager.test.js" timestamp="2025-07-15T17:53:33.788Z" hostname="MACBOOKPRO.local" tests="23" failures="11" errors="0" skipped="0" time="10.077">
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Initialization &gt; should create AudioManager with default settings" time="0.007">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Initialization &gt; should create AudioManager with custom speaker" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Initialization &gt; should create AudioManager with existing stream" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should initialize with getUserMedia when no stream provided" time="0.006">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ { getTracks: [Function spy], …(1) } ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ { getTracks: [Function spy], …(1) } ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/audio-manager.test.js:183:33
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should use existing stream when provided" time="0.003">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ { getTracks: [Function spy], …(2) } ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ { getTracks: [Function spy], …(2) } ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/audio-manager.test.js:196:33
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should handle getUserMedia permission errors" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should handle getUserMedia not found errors" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should handle getUserMedia not supported errors" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should handle generic getUserMedia errors" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; init() method &gt; should set up MediaRecorder event handlers" time="0.004">
            <failure message="Cannot read properties of undefined (reading &apos;ondataavailable&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;ondataavailable&apos;)
 ❯ src/tests/audio/audio-manager.test.js:246:27
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should start recording successfully" time="0.002">
            <failure message="Cannot read properties of undefined (reading &apos;start&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;start&apos;)
 ❯ src/tests/audio/audio-manager.test.js:259:27
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should not start recording when already recording" time="0.002">
            <failure message="Cannot read properties of undefined (reading &apos;start&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;start&apos;)
 ❯ src/tests/audio/audio-manager.test.js:268:27
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should throw error when starting recording without initialization" time="0.001">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should handle data available during recording" time="0.002">
            <failure message="Cannot read properties of undefined (reading &apos;ondataavailable&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;ondataavailable&apos;)
 ❯ src/tests/audio/audio-manager.test.js:294:24
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should ignore empty data during recording" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should stop recording and create utterance" time="0.003">
            <failure message="Cannot read properties of undefined (reading &apos;onstop&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;onstop&apos;)
 ❯ src/tests/audio/audio-manager.test.js:340:24
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should handle stop recording when not recording" time="0.003">
            <failure message="Cannot read properties of undefined (reading &apos;stop&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;stop&apos;)
 ❯ src/tests/audio/audio-manager.test.js:365:27
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should throw error when stopping recording without initialization" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Recording lifecycle &gt; should update recording state on stop" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Audio playback &gt; should play audio from URL" time="0.005">
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Error handling &gt; should handle MediaRecorder creation errors" time="0.003">
            <failure message="promise resolved &quot;undefined&quot; instead of rejecting" type="AssertionError">
AssertionError: promise resolved &quot;undefined&quot; instead of rejecting

- Expected: 
[Error: rejected promise]

+ Received: 
undefined

 ❯ src/tests/audio/audio-manager.test.js:421:40
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Error handling &gt; should handle blob creation with missing mimeType" time="0.002">
            <failure message="Cannot set properties of undefined (setting &apos;mimeType&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;mimeType&apos;)
 ❯ src/tests/audio/audio-manager.test.js:438:29
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-manager.test.js" name="AudioManager &gt; Integration with StorageService &gt; should store utterance in StorageService on stop" time="10.012">
            <failure message="Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with &quot;testTimeout&quot;." type="Error">
Error: Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with &quot;testTimeout&quot;.
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/tests/audio/audio-playback.test.js" timestamp="2025-07-15T17:53:33.793Z" hostname="MACBOOKPRO.local" tests="14" failures="10" errors="0" skipped="0" time="0.04">
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playAudioFor() &gt; should play audio from mapped utterance" time="0.01">
            <failure message="Cannot read properties of undefined (reading &apos;play&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;play&apos;)
 ❯ src/tests/audio/audio-playback.test.js:134:24
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playAudioFor() &gt; should handle case-insensitive word matching" time="0.003">
            <failure message="Cannot read properties of undefined (reading &apos;play&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;play&apos;)
 ❯ src/tests/audio/audio-playback.test.js:150:24
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playAudioFor() &gt; should fallback to TTS when no utterance data found" time="0.003">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;unknown&apos; ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;unknown&apos; ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/audio-playback.test.js:157:44
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playAudioFor() &gt; should fallback to TTS when utterance data has no audioURL" time="0.002">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;hello&apos; ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;hello&apos; ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/audio-playback.test.js:173:44
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playAudioFor() &gt; should fallback to TTS when audio play fails" time="0.002">
            <failure message="Cannot read properties of undefined (reading &apos;play&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;play&apos;)
 ❯ src/tests/audio/audio-playback.test.js:188:17
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playTTSFallback() &gt; should create and speak SpeechSynthesisUtterance" time="0.002">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;test&apos; ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;test&apos; ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/audio-playback.test.js:208:44
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playTTSFallback() &gt; should configure TTS utterance properties" time="0.002">
            <failure message="Cannot read properties of undefined (reading &apos;rate&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;rate&apos;)
 ❯ src/tests/audio/audio-playback.test.js:222:32
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; playTTSFallback() &gt; should handle missing speechSynthesis API" time="0.002">
            <failure message="Cannot delete property &apos;speechSynthesis&apos; of #&lt;Object&gt;" type="TypeError">
TypeError: Cannot delete property &apos;speechSynthesis&apos; of #&lt;Object&gt;
 ❯ src/tests/audio/audio-playback.test.js:230:7
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; Word-to-Utterance Mapping &gt; should map words from utterance with wordTimings" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; Word-to-Utterance Mapping &gt; should map words from utterance without wordTimings" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; Word-to-Utterance Mapping &gt; should not overwrite existing word mappings" time="0.004">
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; Word-to-Utterance Mapping &gt; should clean punctuation from words before mapping" time="0.001">
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; Integration with 3D Word Clicks &gt; should handle 3D word click audio playback" time="0.002">
            <failure message="Cannot read properties of undefined (reading &apos;play&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;play&apos;)
 ❯ src/tests/audio/audio-playback.test.js:424:24
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/audio-playback.test.js" name="Audio Playback Functions &gt; Integration with 3D Word Clicks &gt; should handle 3D word click without audio data" time="0.002">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;unknown&apos; ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;unknown&apos; ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/audio-playback.test.js:433:44
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/tests/audio/dialogue-panel.test.js" timestamp="2025-07-15T17:53:33.796Z" hostname="MACBOOKPRO.local" tests="17" failures="7" errors="0" skipped="0" time="0.087">
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Creation &gt; should create play button for utterance with audio" time="0.013">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Creation &gt; should not create play button for placeholder text" time="0.004">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Creation &gt; should not create play button without audio blob" time="0.004">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Event Handling &gt; should handle play button click events" time="0.009">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;blob:mock-url&apos; ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;blob:mock-url&apos; ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/dialogue-panel.test.js:165:32
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Event Handling &gt; should handle play button pointerdown events" time="0.004">
            <failure message="dom.window.PointerEvent is not a constructor" type="TypeError">
TypeError: dom.window.PointerEvent is not a constructor
 ❯ src/tests/audio/dialogue-panel.test.js:184:28
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Event Handling &gt; should resume AudioContext when suspended" time="0.004">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Play Button Event Handling &gt; should not resume AudioContext when already running" time="0.004">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Word-Level Audio &gt; should create clickable word spans with audio timing" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Word-Level Audio &gt; should handle word click events for audio playback" time="0.007">
            <failure message="expected &quot;spy&quot; to be called 1 times, but got 0 times" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called 1 times, but got 0 times
 ❯ src/tests/audio/dialogue-panel.test.js:289:39
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Word-Level Audio &gt; should handle word pointerdown events for audio playback" time="0.003">
            <failure message="dom.window.PointerEvent is not a constructor" type="TypeError">
TypeError: dom.window.PointerEvent is not a constructor
 ❯ src/tests/audio/dialogue-panel.test.js:325:28
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Word-Level Audio &gt; should not add click handlers to words without timing data" time="0.002">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Word-Level Audio &gt; should handle word timing buffer calculations correctly" time="0.004">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ +0, 0.1, 0.8 ]

Received: 



Number of calls: 0
" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ +0, 0.1, 0.8 ]

Received: 



Number of calls: 0

 ❯ src/tests/audio/dialogue-panel.test.js:384:34
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Audio Context Error Handling &gt; should handle AudioContext resume failures" time="0.004">
            <failure message="expected &quot;spy&quot; to be called 1 times, but got 0 times" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called 1 times, but got 0 times
 ❯ src/tests/audio/dialogue-panel.test.js:406:39
            </failure>
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Audio Context Error Handling &gt; should handle audio decoding failures" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Bubble Enhancement &gt; should enhance existing bubble with audio playback" time="0.004">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Bubble Enhancement &gt; should not duplicate play buttons when enhancing" time="0.003">
        </testcase>
        <testcase classname="src/tests/audio/dialogue-panel.test.js" name="DialoguePanel Audio Functionality &gt; Audio Buffer Caching &gt; should cache decoded audio buffers" time="0.003">
            <failure message="expected &quot;spy&quot; to be called 1 times, but got 0 times" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called 1 times, but got 0 times
 ❯ src/tests/audio/dialogue-panel.test.js:505:48
            </failure>
        </testcase>
    </testsuite>
</testsuites>
