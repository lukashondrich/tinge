name: Multi-Environment Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Stage 1: Deploy to Staging (Automatic)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      staging-url: ${{ steps.deploy-staging.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd shader-playground
          npm ci

      - name: Run tests
        run: |
          cd shader-playground
          npm run test:run || true

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli
          echo "Railway CLI installed successfully"
          railway --version

      - name: Authenticate Railway CLI
        run: |
          echo "Authenticating Railway CLI..."
          railway whoami || echo "Railway authentication failed"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Frontend to Staging
        id: deploy-staging
        run: |
          cd shader-playground
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo "Connecting to Railway service..."
          railway service frontend-staging
          echo "Railway service connection successful"
          railway status
          # Add retry logic for Railway deployments
          for i in 1 2 3; do
            echo "Deployment attempt $i..."
            if railway up --detach; then
              echo "Deployment successful on attempt $i"
              break
            else
              echo "Deployment failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All deployment attempts failed"
                exit 1
              fi
              echo "Retrying in 30 seconds..."
              sleep 30
            fi
          done
          echo "url=https://frontend-staging-production-3876.up.railway.app" >> $GITHUB_OUTPUT
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Backend to Staging
        run: |
          cd backend
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo "Connecting to Railway backend service..."
          railway service backend-staging
          echo "Railway backend service connection successful"
          railway status
          # Add retry logic for Railway deployments
          for i in 1 2 3; do
            echo "Backend deployment attempt $i..."
            if railway up --detach; then
              echo "Backend deployment successful on attempt $i"
              break
            else
              echo "Backend deployment failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All backend deployment attempts failed"
                exit 1
              fi
              echo "Retrying in 30 seconds..."
              sleep 30
            fi
          done
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run Staging Health Check
        continue-on-error: true
        run: |
          sleep 30
          echo "Testing staging health checks..."
          curl -f ${{ steps.deploy-staging.outputs.url }}/health || echo "‚ö†Ô∏è Frontend health check failed"
          curl -f https://backend-staging-production-bb3d.up.railway.app/health || echo "‚ö†Ô∏è Backend health check failed"
          echo "Health checks completed (errors will not block approval process)"

      - name: Comment on PR with Staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Staging deployment successful! Review at: ${{ steps.deploy-staging.outputs.url }}'
            })

  # Stage 2: Create Production Approval Issue
  request-production-approval:
    name: Create Production Approval Issue
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Debug Approval Job
        run: |
          echo "üîç Production approval job is running!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          
      - name: Create Production Approval Issue
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üöÄ Creating production approval issue...')
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ Production Deployment Approval Required - ${context.sha.substring(0, 7)}`,
              body: `## Production Deployment Request
            
            **Commit**: ${context.sha}
            **Branch**: ${context.ref}
            **Staging URL**: ${{ needs.deploy-staging.outputs.url }}
            
            ### Review Checklist
            - [ ] Staging environment tested
            - [ ] No breaking changes
            - [ ] Performance is acceptable
            - [ ] VHS shader disabled for user testing
            - [ ] Ready for production
            
            **To approve**: Comment with \`approved\`
            **To reject**: Comment with \`rejected\`
            
            @lukashondrich
            
            ---
            *This issue was created to approve the production deployment. Please review the staging environment and comment "approved" to proceed with production deployment.*`,
              assignees: ['lukashondrich']
            })
            
            console.log('Production approval issue created:', issue.number)
            console.log('Issue URL:', issue.html_url)

  # Stage 3: Wait for Manual Approval (separate workflow trigger)
  production-approval:
    name: Wait for Production Approval
    runs-on: ubuntu-latest
    needs: [deploy-staging, request-production-approval]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Manual Approval Gate
        uses: trstringer/manual-approval@v1
        timeout-minutes: 1440  # 24 hours
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: lukashondrich
          minimum-approvals: 1
          issue-title: "Production Deployment Approval - ${{ github.sha }}"

  # Stage 4: Deploy to Production (After Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-staging, production-approval]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Frontend to Production
        run: |
          cd shader-playground
          railway service tinge_frontend
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Backend to Production
        run: |
          cd backend
          railway service tinge_backend
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run Production Health Check
        run: |
          sleep 30
          curl -f https://tingefrontend-production.up.railway.app/health || exit 1
          curl -f https://tingebackend-production.up.railway.app/health || exit 1

      - name: Notify Production Deployment Success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚úÖ Production Deployment Successful - ${context.sha.substring(0, 7)}`,
              body: `
            ## Production Deployment Successful! üéâ
            
            **Commit**: ${context.sha}
            **Production URL**: https://tingefrontend-production.up.railway.app
            **Deployment Time**: ${new Date().toISOString()}
            
            The deployment has been completed successfully and health checks passed.
            `
            })

  # Rollback job (manual trigger only)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Rollback Production
        run: |
          cd shader-playground
          railway service tinge_frontend
          railway rollback
          cd ../backend
          railway service tinge_backend
          railway rollback
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Notify Rollback
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Production Rollback Completed - ${context.sha.substring(0, 7)}`,
              body: `Production has been rolled back to the previous deployment.`
            })