name: Multi-Environment Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Stage 1: Deploy to Staging (Automatic)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      staging-url: ${{ steps.deploy-staging.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd shader-playground
          npm ci

      - name: Run tests
        run: |
          cd shader-playground
          npm run test:run || true

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Frontend to Staging
        id: deploy-staging
        run: |
          cd shader-playground
          railway service frontend-staging
          railway up --detach
          echo "url=https://frontend-staging-production.up.railway.app" >> $GITHUB_OUTPUT
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Backend to Staging
        run: |
          cd backend
          railway service backend-staging
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run Staging Health Check
        run: |
          sleep 30
          curl -f ${{ steps.deploy-staging.outputs.url }}/health || exit 1
          curl -f https://backend-staging-production.up.railway.app/health || exit 1

      - name: Comment on PR with Staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Staging deployment successful! Review at: ${{ steps.deploy-staging.outputs.url }}'
            })

  # Stage 2: Manual Approval Gate
  production-approval:
    name: Production Approval Gate  
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        timeout-minutes: 60
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: lukashondrich
          minimum-approvals: 1
          issue-title: "ðŸš€ Production Deployment Approval Required - ${{ github.sha }}"
          issue-body: |
            ## Production Deployment Request
            
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref }}
            **Staging URL**: ${{ needs.deploy-staging.outputs.staging-url }}
            
            ### Review Checklist
            - [ ] Staging environment tested
            - [ ] No breaking changes  
            - [ ] Performance is acceptable
            - [ ] VHS shader disabled for user testing
            - [ ] Ready for production
            
            **To approve**: Reply with "approved"
            **To reject**: Reply with "rejected"
            
            @lukashondrich
            
            ---
            *This issue was created to approve the production deployment. Please review the staging environment and reply "approved" to proceed.*

  # Stage 3: Deploy to Production (After Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-staging, production-approval]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Frontend to Production
        run: |
          cd shader-playground
          railway service tinge_frontend
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Backend to Production
        run: |
          cd backend
          railway service tinge_backend
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run Production Health Check
        run: |
          sleep 30
          curl -f https://tingefrontend-production.up.railway.app/health || exit 1
          curl -f https://tingebackend-production.up.railway.app/health || exit 1

      - name: Notify Production Deployment Success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `âœ… Production Deployment Successful - ${context.sha.substring(0, 7)}`,
              body: `
            ## Production Deployment Successful! ðŸŽ‰
            
            **Commit**: ${context.sha}
            **Production URL**: https://tingefrontend-production.up.railway.app
            **Deployment Time**: ${new Date().toISOString()}
            
            The deployment has been completed successfully and health checks passed.
            `
            })

  # Rollback job (manual trigger only)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Rollback Production
        run: |
          cd shader-playground
          railway service tinge_frontend
          railway rollback
          cd ../backend
          railway service tinge_backend
          railway rollback
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Notify Rollback
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ”„ Production Rollback Completed - ${context.sha.substring(0, 7)}`,
              body: `Production has been rolled back to the previous deployment.`
            })